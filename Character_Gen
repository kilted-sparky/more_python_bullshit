# Character generator exercise

import random

traderatio = 2
attr_min = 3
# Minimum attributes scores
## classes Str   Int    Wis     Dex     Con
# Warrior  15    -      -       12      10
# Wizard   -     15     10      10      -
# Thief    10    9      -       15      0
# Necro    10    10     15      -       -
attrWarrior = [15,0,0,12,10]
attrWizard = [0,15,10,10,0]
attrThief = [10,9,0,15,0]
attrNecromancer = [10,10,15,0,0]

def ChooseYourCharacter():
    print("Please chose your character class: ")
    print("1 - Warrior")
    print("2 - Wizard")
    print("3 - Thief")
    print("4 - Necromancer")
    strChoice = input("Please make your choice (with the number next to it): ")
    choice = 0
    try:
        choice = int(strChoice)
    except:
        print("You didn't enter a number")
        exit()
    return choice

# comparison, rolled against min allowed
def vaildateSats(attrPer, attrClass, index):
    if  attrPer[index -1] >= attrClass[index -1]:
        return True
    else:
        return False

#check all stats
def validateChar(attrPerson, attrClass):
    for i in range(5):
        if vaildateSats(attrPerson, attrClass, i) == False:
            return False
    return True

def validateClass(attrRolled, attrClass):
    return validateChar(attrRolled, attrClass)

def findTrade(attr, attrClass):
    trade = []
    for i in range(4):
        min = 0
        if attrClass[i] == 0:
            min = attr_min
        else:
            min = attrClass[i]

        if attr[i] > min:
            excess = attr[i] - min
            exch = excess / traderatio
            tradepoint = int(exch)
            if excess > traderatio:
                trade.append(tradepoint)
            else:
                trade.append(0)
        else:
            trade.append(0)
    return  trade

def checkTrade(trade):
    sum = 0
    for x in trade:
        sum += x
    return

def tradeCheck(trade):
    print("")
    for x in range(4):
        if trade[x] > 0:
            spare = trade[x]
            if x == 0:
                print("1 - Strength\t\t {0}pts".format(spare))
            elif x == 1:
                print("2 - Inteligence\t\t {0}pts".format(spare))
            elif x == 2:
                print("3 - Wisdom\t\t {0}pts".format(spare))
            elif x == 3:
                print("4 - Dexterity\t\t {0}pts".format(spare))
            elif x == 4:
                print("5 - Constitution\t\t {0}pts".format(spare))

def choiceToClass(number):
    if number == 1:
        return "Warrior"
    elif number == 2:
        return "Wizard"
    elif number == 3:
        return "Thief"
    elif number == 4:
        return "Necromancer"

def columnToStat(number):
    if number == 0:
        return "Strength"
    elif number == 1:
        return "Intelligence"
    elif number == 2:
        return "Wisdom"
    elif number == 3:
        return "Dexterity"
    elif number == 4:
        return "Constitution"

def showAssignable(attr, attrClass):
    print("")
    for i in range(5):
        if attr[i] < attrClass[i]:
            print("{0} - {1}".format(i+1, columnToStat(i)))

def ChooseAttrMinimum(number):
    if number == 1:
        return attrWarrior
    elif number == 2:
        return attrWizard
    elif number == 3:
        return attrThief
    elif number == 4:
        return  attrNecromancer

def tradeStat(sac, ass, attr, attrClass):
    valid = vaildateSats(attr, attrClass, ass)
    while valid == False:
        if attr[sac -1] - traderatio >= attr_min:
            attr[sac -1] -= traderatio
            attr[ass -1] += 1
        else:
            return attr
        valid = vaildateSats(attr, attrClass, ass)
    return attr

def showCharacter(choice, attr):
    # print stuff
    print("")
    print(choiceToClass(choice))
    for x in range(4):
        print("[{0}]:\t[{1}]".format(columnToStat(x), attr[x]), end = '\t')
    print("")

def showMinimum(attr):
    # print stuff
    for x in range(4):
        print("[{0}]:\t[{1}]".format(columnToStat(x), attr[x]), end = '\t')
    print("")

chosenClass = ChooseYourCharacter()
chosenAttr = ChooseAttrMinimum(chosenClass)
attributes = [random.randint(3,18), random.randint(3,18), random.randint(3,18), random.randint(3,18)]

validClass = validateClass(attributes, chosenAttr)
while validClass == False:
    attrTrade = findTrade(attributes, chosenAttr)
    if checkTrade(attrTrade) > 0:
        tradeCheck(attrTrade)
        sacrifice = int(input("What will you sacrifice to become a {0}: ".format(choiceToClass(chosenClass))))
        assign = int(input("What stat would you like to increase: "))
        attributes = tradeStat(sacrifice, assign, attributes, chosenAttr)
    else:
        print("No more stats left to sacrifice, please rell again")
        exit()
    validClass = validateClass(attributes, chosenAttr)

showCharacter(chosenClass, attributes)
showMinimum(chosenAttr)

print("")
